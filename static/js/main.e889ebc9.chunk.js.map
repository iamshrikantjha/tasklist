{"version":3,"sources":["p2/Store.js","p2/Task.js","p2/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["Task","types","model","text","string","done","optional","boolean","actions","self","toggleTask","taskEdit","data","store","tasks","array","addTask","push","doneTask","i","console","log","deleteTask","destroy","editTask","create","unprotect","persist","storage","localForage","jsonify","then","observer","props","className","onClick","id","content","useState","setData","class","type","placeholder","value","onChange","e","target","alert","pop","map","item","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e889ebc9.chunk.js","sourcesContent":["import { destroy, types, unprotect } from \"mobx-state-tree\";\n// import { observer } from \"mobx-react\";\nimport { persist } from 'mst-persist'\nimport localForage from 'localforage'\n\nconst Task = types\n  .model({\n    text: types.string,\n    done: types.optional(types.boolean, false),\n    // text: types.optional(types.string, \"\"),\n  })\n  // })\n  .actions(self => ({\n    toggleTask() {\n      self.done = !self.done;\n    },\n    taskEdit(data) {\n      self.text = data\n    }\n}));\n\nconst TaskList = types.model({\n  tasks: types.array(Task),\n  })\n  .actions(self => ({\n    addTask(data){\n      self.tasks.push({ text: `${data}`, done: false })\n    },\n    doneTask(i){\n      console.log('====================================');\n      console.log(`${i}`);\n      console.log('====================================');\n      self.tasks[i].toggleTask()\n    },\n    deleteTask(i){\n      destroy(self.tasks[i])\n    },\n    editTask(i){\n      self.tasks[i].taskEdit(`I am editied`)\n    }\n  }));\n\nconst store = TaskList.create({ tasks: [] });\n\nunprotect(store) // needed to allow modifying outside of an action\nstore.tasks.push({ text: \"Grab coffee\" })\nstore.tasks.push({ text: \"Grab tea\" })\nstore.tasks.push({ text: \"Grab water\" })\n// store.addTask()\n\n// console.log(store.tasks[0].toggleTask());\n// console.log(store.tasks[0].toggleTask());\n// console.log(store.tasks[2]) // prints: \"Grab coffee\"\nconsole.log('====================================');\n// console.log(store.tasks);\nconsole.log('====================================');\n\npersist('fire', store, {\n  storage: localForage,  // or AsyncStorage in react-native.\n                         // default: localStorage\n  jsonify: false,  // if you use AsyncStorage, this shoud be true\n                  // default: true\n  // whitelist: ['name']  \n  // only these keys will be persisted\n}).then(() => console.log(store))\n\nexport default store;\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport store from \"./Store\";\n\nconst Task = (props) => {\n  return (\n    <a className=\"is-unselectable\">\n      <div className=\"box my-3\">\n        <div className=\"media\">\n          <div className=\"container\">\n            <div className=\"level\">\n              <div className=\"level-left\">\n                <div className=\"level-item\">\n                  {props.done === true ? (\n                    <a className=\"media-content has-text-weight-semibold strike\" onClick={() => store.doneTask(props.id)}>\n                      {props.content}\n                    </a>\n                  ) : (\n                    <div className=\"media-content has-text-weight-semibold\" onClick={() => store.doneTask(props.id)}>\n                      {props.content}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <div className=\"level-right\">\n                <div className=\"level-item\">\n                  <div\n                    className=\"button is-success\"\n                    onClick={() => store.editTask(props.id)}\n                  >\n                    Edit\n                  </div>\n                </div>\n                <div className=\"level-item\">\n                  <div\n                    className=\"button is-danger\"\n                    onClick={() => store.deleteTask(props.id)}\n                  >\n                    Remove\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </a>\n  );\n};\n\nexport default observer(Task);\n","import { observer } from \"mobx-react\";\nimport React, { useState } from \"react\";\nimport Task from \"./Task\";\nimport store from \"./Store\";\n\nconst TaskList = () => {\n  const [data, setData] = useState(null);\n\n  const handleClick = () => {\n      if (data === null || '') {\n          alert('Please enter task first')\n      }\n      else\n      {\n        // e.preventDefault();\n        store.addTask(data);\n        setData(null);\n      }\n  };\n\n  const handleRemoveClick = () => {\n    store.tasks.pop();\n  };\n\n  return (\n    <>\n      {/* Here in this app a list of tasks will be appeared from store */}\n      <div className=\"section\">\n        <div className=\"container has-text-centered\">\n          <div className=\"title\">TaskList</div>\n        </div>\n\n        {/* Add Task Section */}\n        <div className=\"columns is-centered is-marginless my-6\">\n          <div className=\"column is-4-desktop\">\n            <div className=\"container\">\n              {/* Add Task Field */}\n              <div class=\"field has-addons has-addons-centered\">\n                <div class=\"control\">\n                  <input\n                    class=\"input monty\"\n                    type=\"text\"\n                    placeholder=\"Add task\"\n                    value={data}\n                    // onChange={setData}\n                    // onInput={e => setData(e.target.value)}\n                    onChange={e => setData(e.target.value)}\n                  />\n                </div>\n                {/* Add Task */}\n                <div class=\"control\">\n                  <a\n                    class=\"button is-success has-text-weight-semibold\"\n                    onClick={handleClick}\n                    // onSubmit={handleClick}\n                  >\n                    Add \n                  </a>\n                </div>\n\n                {/* Remove Task */}\n                <div class=\"control\">\n                  <a\n                    class=\"button is-danger has-text-weight-semibold\"\n                    onClick={() => handleRemoveClick()}\n                  >\n                    Remove\n                  </a>\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* TaskList */}\n        <div className=\"columns is-centered is-marginless my-6\">\n          <div className=\"column is-4-desktop\">\n            {store.tasks.map(function (item, index) {\n              return <Task key={index} id={index} content={item.text} done={item.done} />;\n            })}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default observer(TaskList);\n","import React from \"react\";\nimport \"bulma/css/bulma.css\";\n// import store from \"./p1/Store\";\n// import Counter from \"./p1/Counter\";\n\nimport TaskList from \"./p2/TaskList\";\nimport store from \"./p2/Store\";\n\n// import \"./debug.css\";\n\nfunction App() {\n  return (\n    <div className=\"hero is-fullheight has-background-primary-light\">\n      <TaskList store={store} />\n      {/* <Counter store={store} /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}